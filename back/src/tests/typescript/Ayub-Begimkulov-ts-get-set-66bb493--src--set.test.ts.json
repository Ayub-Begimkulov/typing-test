{"type":"typescript","text":"import { set } from \"./index\";\n\ndescribe(\"set\", () => {\n  it(\"basic\", () => {\n    const obj = {\n      a: 5,\n    };\n    expect(set(obj, \"a\", \"asdf\")).toStrictEqual({ a: \"asdf\" });\n  });\n\n  it(\"should work with nested objects\", () => {\n    const obj = {\n      a: { b: 5 },\n    };\n    expect(set(obj, \"a.b\", 6)).toStrictEqual({ a: { b: 6 } });\n  });\n\n  it(\"should work with arrays\", () => {\n    const arr = [1, 2, 3];\n    expect(set(arr, \"1\", 4)).toStrictEqual([1, 4, 3]);\n    const obj = {\n      a: [0, 1, 2],\n    };\n    expect(set(obj, \"a.2\", 3)).toStrictEqual({ a: [0, 1, 3] });\n  });\n\n  it(\"should create a key if not present in object\", () => {\n    const obj = {\n      a: 5,\n    };\n    expect(set(obj, \"b\", \"asdf\")).toStrictEqual({ a: 5, b: \"asdf\" });\n  });\n\n  it(\"should create correct default object for nested paths\", () => {\n    const obj = { a: 5 };\n    expect(set(obj, \"a.b.c\", \"hello world\")).toStrictEqual({\n      a: { b: { c: \"hello world\" } },\n    });\n    // we are using `toEqual` here because index `1`\n    // will create empty element, which is not the same as `undefined`\n    expect(set({}, \"a.1.c\", \"asdf\")).toEqual({\n      a: [undefined, { c: \"asdf\" }],\n    });\n  });\n});","words":[{"text":"import","type":"Keyword","range":[0,6]},{"text":"set","type":"Identifier","range":[9,12]},{"text":"from","type":"Identifier","range":[15,19]},{"text":"\"./index\"","type":"String","range":[20,29]},{"text":"describe","type":"Identifier","range":[32,40]},{"text":"\"set\"","type":"String","range":[41,46]},{"text":"it","type":"Identifier","range":[58,60]},{"text":"\"basic\"","type":"String","range":[61,68]},{"text":"const","type":"Keyword","range":[82,87]},{"text":"obj","type":"Identifier","range":[88,91]},{"text":"a","type":"Identifier","range":[102,103]},{"text":"5","type":"Numeric","range":[105,106]},{"text":"expect","type":"Identifier","range":[119,125]},{"text":"set","type":"Identifier","range":[126,129]},{"text":"obj","type":"Identifier","range":[130,133]},{"text":"\"a\"","type":"String","range":[135,138]},{"text":"\"asdf\"","type":"String","range":[140,146]},{"text":"toStrictEqual","type":"Identifier","range":[149,162]},{"text":"a","type":"Identifier","range":[165,166]},{"text":"\"asdf\"","type":"String","range":[168,174]},{"text":"it","type":"Identifier","range":[188,190]},{"text":"\"should work with nested objects\"","type":"String","range":[191,224]},{"text":"const","type":"Keyword","range":[238,243]},{"text":"obj","type":"Identifier","range":[244,247]},{"text":"a","type":"Identifier","range":[258,259]},{"text":"b","type":"Identifier","range":[263,264]},{"text":"5","type":"Numeric","range":[266,267]},{"text":"expect","type":"Identifier","range":[282,288]},{"text":"set","type":"Identifier","range":[289,292]},{"text":"obj","type":"Identifier","range":[293,296]},{"text":"\"a.b\"","type":"String","range":[298,303]},{"text":"6","type":"Numeric","range":[305,306]},{"text":"toStrictEqual","type":"Identifier","range":[309,322]},{"text":"a","type":"Identifier","range":[325,326]},{"text":"b","type":"Identifier","range":[330,331]},{"text":"6","type":"Numeric","range":[333,334]},{"text":"it","type":"Identifier","range":[350,352]},{"text":"\"should work with arrays\"","type":"String","range":[353,378]},{"text":"const","type":"Keyword","range":[392,397]},{"text":"arr","type":"Identifier","range":[398,401]},{"text":"1","type":"Numeric","range":[405,406]},{"text":"2","type":"Numeric","range":[408,409]},{"text":"3","type":"Numeric","range":[411,412]},{"text":"expect","type":"Identifier","range":[419,425]},{"text":"set","type":"Identifier","range":[426,429]},{"text":"arr","type":"Identifier","range":[430,433]},{"text":"\"1\"","type":"String","range":[435,438]},{"text":"4","type":"Numeric","range":[440,441]},{"text":"toStrictEqual","type":"Identifier","range":[444,457]},{"text":"1","type":"Numeric","range":[459,460]},{"text":"4","type":"Numeric","range":[462,463]},{"text":"3","type":"Numeric","range":[465,466]},{"text":"const","type":"Keyword","range":[474,479]},{"text":"obj","type":"Identifier","range":[480,483]},{"text":"a","type":"Identifier","range":[494,495]},{"text":"0","type":"Numeric","range":[498,499]},{"text":"1","type":"Numeric","range":[501,502]},{"text":"2","type":"Numeric","range":[504,505]},{"text":"expect","type":"Identifier","range":[519,525]},{"text":"set","type":"Identifier","range":[526,529]},{"text":"obj","type":"Identifier","range":[530,533]},{"text":"\"a.2\"","type":"String","range":[535,540]},{"text":"3","type":"Numeric","range":[542,543]},{"text":"toStrictEqual","type":"Identifier","range":[546,559]},{"text":"a","type":"Identifier","range":[562,563]},{"text":"0","type":"Numeric","range":[566,567]},{"text":"1","type":"Numeric","range":[569,570]},{"text":"3","type":"Numeric","range":[572,573]},{"text":"it","type":"Identifier","range":[588,590]},{"text":"\"should create a key if not present in object\"","type":"String","range":[591,637]},{"text":"const","type":"Keyword","range":[651,656]},{"text":"obj","type":"Identifier","range":[657,660]},{"text":"a","type":"Identifier","range":[671,672]},{"text":"5","type":"Numeric","range":[674,675]},{"text":"expect","type":"Identifier","range":[688,694]},{"text":"set","type":"Identifier","range":[695,698]},{"text":"obj","type":"Identifier","range":[699,702]},{"text":"\"b\"","type":"String","range":[704,707]},{"text":"\"asdf\"","type":"String","range":[709,715]},{"text":"toStrictEqual","type":"Identifier","range":[718,731]},{"text":"a","type":"Identifier","range":[734,735]},{"text":"5","type":"Numeric","range":[737,738]},{"text":"b","type":"Identifier","range":[740,741]},{"text":"\"asdf\"","type":"String","range":[743,749]},{"text":"it","type":"Identifier","range":[763,765]},{"text":"\"should create correct default object for nested paths\"","type":"String","range":[766,821]},{"text":"const","type":"Keyword","range":[835,840]},{"text":"obj","type":"Identifier","range":[841,844]},{"text":"a","type":"Identifier","range":[849,850]},{"text":"5","type":"Numeric","range":[852,853]},{"text":"expect","type":"Identifier","range":[861,867]},{"text":"set","type":"Identifier","range":[868,871]},{"text":"obj","type":"Identifier","range":[872,875]},{"text":"\"a.b.c\"","type":"String","range":[877,884]},{"text":"\"hello world\"","type":"String","range":[886,899]},{"text":"toStrictEqual","type":"Identifier","range":[902,915]},{"text":"a","type":"Identifier","range":[924,925]},{"text":"b","type":"Identifier","range":[929,930]},{"text":"c","type":"Identifier","range":[934,935]},{"text":"\"hello world\"","type":"String","range":[937,950]},{"text":" we are using `toEqual` here because index `1`","type":"Line","range":[968,1016]},{"text":" will create empty element, which is not the same as `undefined`","type":"Line","range":[1021,1087]},{"text":"expect","type":"Identifier","range":[1092,1098]},{"text":"set","type":"Identifier","range":[1099,1102]},{"text":"\"a.1.c\"","type":"String","range":[1107,1114]},{"text":"\"asdf\"","type":"String","range":[1116,1122]},{"text":"toEqual","type":"Identifier","range":[1125,1132]},{"text":"a","type":"Identifier","range":[1141,1142]},{"text":"undefined","type":"Identifier","range":[1145,1154]},{"text":"c","type":"Identifier","range":[1158,1159]},{"text":"\"asdf\"","type":"String","range":[1161,1167]}]}